# Docker Compose configuration for iTransfer
# This file defines all the services needed to run the application

version: '3.8'

services:
  # Frontend service: React application
  frontend:
    image: tiritibambix/itransfer-frontend
    ports:
      - "3500:80"  # Map container port 80 to host port 3500
    depends_on:
      - backend  # Ensure backend starts first
    networks:
      - itransfer-network  # Connect to our custom network
    environment:
      # URL publique du backend (avec https:// si derrière reverse proxy)
      # Exemple local : http://localhost:5500
      # Exemple proxy : https://api.itransfer.domain.com
      - BACKEND_URL=${BACKEND_URL:-http://localhost:5500}
    # Mount the source code for development
    volumes:
      - ./frontend:/app
      - /app/node_modules

  # Backend service: Flask application
  backend:
    image: tiritibambix/itransfer-backend
    ports:
      - "5500:5000"  # Map container port 5000 to host port 5500
    depends_on:
      - db  # Ensure database starts first
    networks:
      - itransfer-network  # Connect to our custom network
    environment:
      # URL publique du frontend (avec https:// si derrière reverse proxy)
      # Exemple local : http://localhost:3500
      # Exemple proxy : https://itransfer.domain.com
      - FRONTEND_URL=${FRONTEND_URL:-http://localhost:3500}
      # Identifiants administrateur
      - ADMIN_USERNAME=${ADMIN_USERNAME:-adminuser}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD:-adminuserpassword}
      # Configuration base de données
      - DATABASE_URL=mysql+mysqldb://mariadb_user:mariadb_pass@db/mariadb_db
      # Configuration HTTPS
      - FORCE_HTTPS=true
      - PROXY_COUNT=1
      # Public URL of the backend
      - BACKEND_URL=${BACKEND_URL:-http://localhost:5500}
    volumes:
      # Persist uploads and configuration
      - ./backend/data:/app/data
      - ./backend/uploads:/app/uploads
      - uploads:/app/uploads  # Store uploaded files
      - data:/app/data  # Store application data (SMTP config, etc.)

  # Database service: MySQL
  db:
    image: mariadb
    environment:
      MYSQL_ROOT_PASSWORD: root_password
      MYSQL_DATABASE: mariadb_db
      MYSQL_USER: mariadb_user
      MYSQL_PASSWORD: mariadb_pass
    ports:
      - "3306:3306"
    volumes:
      # Persist database data
      - ./db_data:/var/lib/mysql
      # Mount initialization scripts
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "mysqladmin ping -h 127.0.0.1 -u root --password=$MYSQL_ROOT_PASSWORD || echo 'Healthcheck failed' >> /var/log/healthcheck.log"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    networks:
      - itransfer-network  # Connect to our custom network
    restart: always  # Automatically restart if it crashes

# Custom network for inter-service communication
networks:
  itransfer-network:
    driver: bridge  # Use bridge network driver

# Define named volumes for data persistence
volumes:
  mysql_data:  # Stores MySQL database files
  uploads:     # Stores uploaded files
  data:        # Stores application data (SMTP config, etc.)